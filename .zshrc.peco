# -*- mode: sh -*-

function peco_select_history() {
    local tac
    exists gtac && tac="gtac" || { exists tac && tac="tac" || { tac="tail -r" } }
    BUFFER=$(fc -l -n 1 | eval $tac | peco --query "$LBUFFER")
    CURSOR=$#BUFFER         # move cursor
    zle -R -c               # refresh
}
zle -N peco_select_history
bindkey "^R" peco_select_history

function peco-src () {
    local selected_dir=$(ghq list | peco --query "$LBUFFER")
    if [ -n "$selected_dir" ]; then
        BUFFER="cd $(ghq root)/${selected_dir}"
        CURSOR=$#BUFFER         # move cursor
    fi
    zle -R -c               # refresh
}
zle -N peco-src
bindkey "^W" peco-src

function peco_select_directory() {
    local tac
    if which tac > /dev/null; then
        tac="tac"
    else
        tac="tail -r"
    fi
    local dest=$(_z -r 2>&1 | eval $tac | peco --query "$LBUFFER" | awk '{ print $2 }')
    if [ -n "${dest}" ]; then
        cd ${dest}
    fi
    zle reset-prompt
}
zle -N peco_select_directory
bindkey "^X^J" peco_select_directory

# http://blog.horimisli.me/entry/terminal-env-2014
function peco-proc () {
    local selected_pid=$(ps ax -o pid,lstart,command | peco --query "$LBUFFER" | awk '{print $1}')
    if [ -n "$selected_pid" ]; then
        kill $selected_pid
    fi
    zle -R -c
}
zle -N peco-proc
bindkey "^X^P" peco-proc

function findmemo () {
    ag --ignore "*.pdf" -l -i $1 ~/Dropbox/memo ~/Dropbox/junk | peco | xargs less
}

function ghis() {
    ghi show $(ghi list --sort updated | grep -v 'open issue' | grep -v 'Not Found' | peco | awk '{ print $1 }')
}

function httpst() {
    ruby -r rack/utils -e 'Rack::Utils::HTTP_STATUS_CODES.each_pair { |code, desc| puts "#{code} #{desc}" }' | peco
}

function ec2s() {
    local jq_query='.Reservations[] | .Instances[] | select(.State.Name != "terminated") | select(has("PublicIpAddress")) | [.PublicIpAddress,.PrivateIpAddress,.State.Name,(.Tags[] | select(.Key == "Name") | .Value // "")] | join("\t")'

    if type envchain > /dev/null 2&>1; then
        envchain $1 aws ec2 describe-instances | jq -r $jq_query | peco
    else
        aws ec2 describe-instances | jq -r $jq_query | peco
    fi
}

function ec2-cssh() {
    local ssh_user=$1
    local ssh_key=$2
    local ip_addresses

    if type envchain > /dev/null 2&>1; then
        ip_addresses=$(ec2s $3 | awk '{ print $1 }' | tr '\n' ' ')
    else
        ip_addresses=$(ec2s | awk '{ print $1 }' | tr '\n' ' ')
    fi

    if [ -n $ip_addresses ]; then
        sh -c "tmux-cssh -u $ssh_user -i $ssh_key $ip_addresses"
    fi
}

# http://k0kubun.hatenablog.com/entry/2014/07/06/033336
alias -g B='`git branch | peco | sed -e "s/^\*[ ]*//g"`'
alias -g C='`git log --oneline --branches | peco | cut -d" " -f1`'
alias -g F='`git ls-files | peco`'
alias -g K='`bundle exec kitchen list | tail -n +2 | peco | cut -d" " -f1`'
alias -g P='`docker ps | tail -n +2 | peco | cut -d" " -f1`'
alias -g R='`git reflog | peco | cut -d" " -f1`'
alias -g V='`vagrant box list | peco | cut -d" " -f1`'
